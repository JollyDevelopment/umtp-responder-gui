#!/usr/bin/env python

# ----- imports -----
import os
import json
# import subprocess
import subprocess
from pathlib import Path
import gi
gi.require_version("Gtk", "3.0")
from gi.repository import Gtk, Gio, Gdk
from utils.helpers import RowItem


# ----- variables ------
opj = os.path.join
g_ui_bld = None
g_win = None
service_state = "disabled"  # default state, overridden when user_prefs are loaded
exposed_folders = [
    {"index": 0, "path": "/tmp", "access_level": "ro"}
]  # default folder, overridden when user_prefs are loaded
user_prefs_defaults = {
    "exposed_folders": [
        {"index": 0, "path": "/tmp", "access_level": "ro"}
    ],
    "service_state": "disabled"
}


# ----- functions -----


def get_file_loc():
    # get the current path on disk
    this_loc = os.path.dirname(os.path.abspath(__file__))
    return this_loc


def load_user_preferences():
    # test if the $HOME/.config/umtp-responder-gui/user_prefs.json file exists
    # make it if not, load the prefs if it is
    user_home = Path.home()
    urg_upd = Path(f"{user_home}/.config/umtp-responder-gui/")
    upj = Path(f"{user_home}/.config/umtp-responder-gui/user_prefs.json")
    if not Path.exists(upj):
        if not Path.exists(urg_upd):
            # make the directory
            Path.mkdir(urg_upd)
        else:
            # create the file and store defaults
            defaults_json = json.dumps(user_prefs_defaults)
            with open(upj, "w") as f:
                f.write(defaults_json)
    else:
        with open(upj, "r") as f:
            data = f.read()
            saved_prefs = json.loads(data)
            global service_state
            global exposed_folders
            service_state = saved_prefs["service_state"]
            exposed_folders = saved_prefs["exposed_folders"]


def load_service_state():
    # connect to the enabled/disabled buttons
    # check the service_state and set the correct button as active
    global g_ui_bld
    enabled_button = g_ui_bld.get_object("EnabledRadioButton")
    disabled_button = g_ui_bld.get_object("DisabledRadioButton")
    if service_state == "enabled":
        enabled_button.set_active(True)
    else:
        disabled_button.set_active(True)


def setup_ui_builder():
    glade_file = opj(get_file_loc(), "ui/main_window_ui.glade")
    builder = Gtk.Builder()
    builder.add_from_file(glade_file)
    handlers = {
        "onDestroy": Gtk.main_quit,
        "on_EnabledRadioButton_toggled": set_service_state,
        "on_DisabledRadioButton_toggled": set_service_state,
        "on_StartButton_clicked": start_service,
        "on_StopButton_clicked": stop_service,
        "on_RestartButton_clicked": restart_service,
        "on_PlusButton_clicked": choose_new_folder,
        "on_CancelFolderButton_clicked": cancel_new_folder_dialog,
        "on_SelectFolderButton_clicked": select_new_folder,
        "on_SaveButton_clicked": save_settings,
    }
    builder.connect_signals(handlers)
    return builder


def setup_window(ui_bld):
    # window = ui_bld.get_object("MainWin")
    window = ui_bld.get_object("AppWin")
    window.maximize()
    return window


def set_global_refs(ui_bld, win):
    global g_ui_bld
    g_ui_bld = ui_bld
    global g_win
    g_win = win


def save_settings(save_button_widget):
    folders_to_save_to_disk = []
    # get the list items from folderlistbox
    global g_ui_bld
    flb = g_ui_bld.get_object("FolderListBox")
    for c in flb.get_children():
        # from each child get the
        # path,
        # the access_level (basically the selected toggle in the gui)
        # and the index in the listbox
        c_path = c.get_name()
        c_index = c.get_index()
        c_access_level = get_row_item_access_level(c)
        # print(f" child path: {c_path}")
        # print(f" child index {c_index}")
        # print(f" child access {c_access_level}")
        # create the dict to hold that info
        c_dict = {"index": c_index, "path": c_path, "access_level": c_access_level}
        # append those to the list
        folders_to_save_to_disk.append(c_dict)

    # save the folders to the user_prefs
    # set the path
    user_home = Path.home()
    upj = Path(f"{user_home}/.config/umtp-responder-gui/user_prefs.json")
    # create the dict
    prefs_to_save = {
        "service_state": service_state,
        "exposed_folders": folders_to_save_to_disk
    }
    # write that to disk
    with open(upj, "w") as f:
        prefs = json.dumps(prefs_to_save)
        f.write(prefs)

    # update the in-memory exposed_folders list
    global exposed_folders
    exposed_folders = folders_to_save_to_disk.copy()

    # build the conf file from the base+ appropriate tail template(s)
    # load the base template
    base_template = opj(get_file_loc(), "templates/base")
    with open(base_template, "r") as f:
        bt = f.read()
    # loop through the exposed_folders list and create the
    # strings to add to the base_template
    # then concat them all into a new string var
    exposed_folders_string = ""
    for ef in exposed_folders:
        if ef["access_level"] == "disabled":
            s = f'# storage "{ef["path"]}" "{ef["path"]}" "{ef["access_level"]}" \n'
        else:
            s = f'storage "{ef["path"]}" "{ef["path"]}" "{ef["access_level"]}" \n'
        exposed_folders_string += s

    # combine the template and folder strings
    conf_file = bt + exposed_folders_string

    # write the file to disk
    write_the_conf_to_disk(conf_file)


def write_the_conf_to_disk(cf):
    uh = Path.home()
    cf_orig = f"{uh}/.config/umtp-responder-gui/umtprd.conf"
    cf_bk = f"{uh}/.config/umtp-responder-gui/umtprd.conf.bk"
    # move the existing conf file to a backup
    os.rename(cf_orig, cf_bk)
    # write the new conf file to disk
    with open(cf_orig, "w") as f:
        f.write(cf)


def set_service_state(service_widget):
    # set the state var to whatever widget was clicked
    # this is later stored in user_prefs when save settings is clicked
    global service_state
    service_state = service_widget.get_name()
    # actually enable or disable the service
    if service_state == "enabled":
        subprocess.run(['pkexec', 'umtp-responder-control', 'enable'])
    else:
        subprocess.run(['pkexec', 'umtp-responder-control', 'disable'])


def start_service(start_service_widget):
    subprocess.run(['pkexec', 'umtp-responder-control', 'start'])


def stop_service(stop_service_widget):
    subprocess.run(['pkexec', 'umtp-responder-control', 'stop'])


def restart_service(restart_service_widget):
    subprocess.run(['pkexec', 'umtp-responder-control', 'restart'])


def choose_new_folder(plus_button_widget):
    print("plus button clicked")
    b = g_ui_bld
    fcd = b.get_object("FolderChooserDialog")
    fcd.show()


def cancel_new_folder_dialog(cancel_folder_chooser_widget):
    b = g_ui_bld
    fcd = b.get_object("FolderChooserDialog")
    fcd.hide()


def select_new_folder(select_folder_chooser_widget):
    # print("folder select button pressed")
    b = g_ui_bld
    fcd = b.get_object("FolderChooserDialog")
    # print(fcd.get_uri())
    # get the folder uri
    f_uri = fcd.get_uri()
    # strip off the 'file://' bit
    fpath = f_uri[7:]
    # add a new rowitem for that path
    add_single_item_to_list(fpath)
    # hide the folderchooserdialog
    fcd.hide()


def add_stored_list_items(ui_bld, win):
    # connect to the ListBox
    flb = ui_bld.get_object("FolderListBox")
    # loop through the exposed_folders
    # make a new listrowbox make a RowItem
    # add all the rowitems to the folderlistbox
    for i in exposed_folders:
        lbr = Gtk.ListBoxRow.new()
        ri = RowItem(i["path"], i["access_level"])
        lbr.add(ri.build_row())
        lbr.set_name(i["path"])  # set the name of the row widget to be the folder path
        lbr.set_halign(Gtk.Align(3))  # set the rowitem to be CENTER alignment
        lbr.set_activatable(False)
        lbr.set_selectable(False)
        lbr.show()
        flb.insert(lbr, i["index"])


def add_single_item_to_list(folder_path):
    # connect to the ListBox
    global g_ui_bld
    flb = g_ui_bld.get_object("FolderListBox")
    lbr = Gtk.ListBoxRow.new()
    ri = RowItem(folder_path, "disabled")
    lbr.add(ri.build_row())
    lbr.set_name(folder_path)  # set the name of the row widget to be the folder path
    lbr.set_halign(Gtk.Align(3))  # set the rowitem to be CENTER alignment
    lbr.set_activatable(False)
    lbr.set_selectable(False)
    lbr.show()
    flb.add(lbr)


def get_row_item_access_level(row_item_widget):
    # loop through th listitemrow widget's children
    # get the "choices" widget (which holds the toggle buttons
    # loop through the choices widget's children and find the one that is
    # active, and return that one's name
    for lbr in row_item_widget.get_children():
        # this is the overall_box
        for ob in lbr.get_children():
            # this should be the whole_box widget from the RowItem class
            for c in ob.get_children():
                if c.get_name() == "choices":
                    for k in c.get_children():
                        if k.get_active():
                            return k.get_name()


# ----- main -----

def main():
    # connect the ui
    b = setup_ui_builder()

    # instantiate the window
    w = setup_window(b)

    # set global refs for builder and window
    set_global_refs(b, w)

    # load saved setting
    load_user_preferences()
    # load the service state
    load_service_state()
    # add the list items from stored settings
    add_stored_list_items(b, w)

    # make window visible
    w.show_all()

    # run the whole thing
    Gtk.main()


if __name__ == '__main__':
    main()
